// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.2
// source: weather-station.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WeatherStationService_SendReading_FullMethodName = "/WeatherStation.WeatherStationService/SendReading"
	WeatherStationService_GetReading_FullMethodName  = "/WeatherStation.WeatherStationService/GetReading"
)

// WeatherStationServiceClient is the client API for WeatherStationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeatherStationServiceClient interface {
	SendReading(ctx context.Context, in *WeatherStationReading, opts ...grpc.CallOption) (*ServerResponse, error)
	GetReading(ctx context.Context, in *GetReadingsRequest, opts ...grpc.CallOption) (*GetReadingsResponse, error)
}

type weatherStationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWeatherStationServiceClient(cc grpc.ClientConnInterface) WeatherStationServiceClient {
	return &weatherStationServiceClient{cc}
}

func (c *weatherStationServiceClient) SendReading(ctx context.Context, in *WeatherStationReading, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, WeatherStationService_SendReading_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherStationServiceClient) GetReading(ctx context.Context, in *GetReadingsRequest, opts ...grpc.CallOption) (*GetReadingsResponse, error) {
	out := new(GetReadingsResponse)
	err := c.cc.Invoke(ctx, WeatherStationService_GetReading_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeatherStationServiceServer is the server API for WeatherStationService service.
// All implementations must embed UnimplementedWeatherStationServiceServer
// for forward compatibility
type WeatherStationServiceServer interface {
	SendReading(context.Context, *WeatherStationReading) (*ServerResponse, error)
	GetReading(context.Context, *GetReadingsRequest) (*GetReadingsResponse, error)
	mustEmbedUnimplementedWeatherStationServiceServer()
}

// UnimplementedWeatherStationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWeatherStationServiceServer struct {
}

func (UnimplementedWeatherStationServiceServer) SendReading(context.Context, *WeatherStationReading) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReading not implemented")
}
func (UnimplementedWeatherStationServiceServer) GetReading(context.Context, *GetReadingsRequest) (*GetReadingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReading not implemented")
}
func (UnimplementedWeatherStationServiceServer) mustEmbedUnimplementedWeatherStationServiceServer() {}

// UnsafeWeatherStationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeatherStationServiceServer will
// result in compilation errors.
type UnsafeWeatherStationServiceServer interface {
	mustEmbedUnimplementedWeatherStationServiceServer()
}

func RegisterWeatherStationServiceServer(s grpc.ServiceRegistrar, srv WeatherStationServiceServer) {
	s.RegisterService(&WeatherStationService_ServiceDesc, srv)
}

func _WeatherStationService_SendReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeatherStationReading)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherStationServiceServer).SendReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeatherStationService_SendReading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherStationServiceServer).SendReading(ctx, req.(*WeatherStationReading))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeatherStationService_GetReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherStationServiceServer).GetReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeatherStationService_GetReading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherStationServiceServer).GetReading(ctx, req.(*GetReadingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WeatherStationService_ServiceDesc is the grpc.ServiceDesc for WeatherStationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeatherStationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WeatherStation.WeatherStationService",
	HandlerType: (*WeatherStationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendReading",
			Handler:    _WeatherStationService_SendReading_Handler,
		},
		{
			MethodName: "GetReading",
			Handler:    _WeatherStationService_GetReading_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weather-station.proto",
}
